:ruby
  type_collection = field.polymorphic_type_collection
  type_column = field.association[:foreign_type].to_s
  selected_type = field.bindings[:object].send(type_column)
  collections = HashWithIndifferentAccess.new
  type_collection.map(&:last).each do |type|
    collections[type] = field.associated_collection(type)
  end
  selected = field.bindings[:object].send(field.association[:name])
  column_type_dom_id = form.dom_id(field).sub(field.method_name.to_s, type_column)
  select_data_attributes = if field.associated_collection_scope.nil?
    { :polymorphic => true, :urls => field.polymorphic_type_urls.to_json }
  else
    { :polymorphic_cached => true, collections: collections.to_json }
  end

= form.select type_column, type_collection, {:include_blank => true, :selected => selected_type}, :id => column_type_dom_id, :data => { }.merge(select_data_attributes)
= form.select field.method_name, selected_type.nil? ? [] : collections[selected_type], {:include_blank => true, :selected => selected.try(:id)}, :style => "margin-left:10px;"
