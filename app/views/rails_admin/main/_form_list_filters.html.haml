:ruby
  query = params[:query]
  params.delete(:query) if params[:query].blank?
  @index = 0
  @ordered_filters = (params[:f] || @model_config.list.filters).inject({}) { |memo, filter|
    field_name = filter.is_a?(Array) ? filter.first : filter
  (filter.is_a?(Array) ? filter.last : { (@index += 1) => { "v" => '' } }) .each do |index, filter_hash|
      unless filter_hash['disabled']
        memo[index] = { field_name => filter_hash }
      else
        params[:f].delete(field_name)
      end
    end
    memo
  }.to_a.sort_by(&:first)

  @ordered_filter_string = @ordered_filters.map do |duplet|
    filter_index = duplet[0]
    filter_for_field = duplet[1]
    filter_name = filter_for_field.keys.first
    filter_hash = filter_for_field.values.first
    field = @filterable_fields.find{ |field| field.name == filter_name.to_sym }
    unless field
      fail "#{filter_name} is not currently filterable; filterable fields are #{@filterable_fields.map(&:name).join(', ')}"
    end
    field_options = case field.type
    when :enum
      options_for_select(field.with(object: @abstract_model.model.new).enum, filter_hash['v'])
    else
      ''
    end
    %{
      $.filters.append(#{field.label.to_json}, #{field.name.to_json}, #{field.type.to_json}, #{filter_hash['v'].to_json}, #{filter_hash['o'].to_json}, #{field_options.to_json}, #{filter_index.to_json});
    }
  end.join.html_safe if @ordered_filters

%script
  jQuery(function($) {
  $.filters.options.regional = {
  datePicker: {
  dateFormat: #{raw I18n.t("admin.misc.filter_date_format", default: I18n.t("admin.misc.filter_date_format", locale: :en)).to_json},
  dayNames: #{raw RailsAdmin::Config::Fields::Types::Datetime.day_names.to_json},
  dayNamesShort: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_day_names.to_json},
  dayNamesMin: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_day_names.to_json},
  firstDay: "1",
  monthNames: #{raw RailsAdmin::Config::Fields::Types::Datetime.month_names.to_json},
  monthNamesShort: #{raw RailsAdmin::Config::Fields::Types::Datetime.abbr_month_names.to_json}
  }
  }

  = @ordered_filter_string

  });

= form_tag(index_path(params.except(*%w[page f query])), method: :get, class: "pjax-form form-inline") do
  .well.filters
    %span#filters_box
    %hr.filters_box{style: "display:#{@ordered_filters.empty? ? 'none' : 'block'}"}
    .input-group
      %input.form-control.input-small{name: "query", type: "search", value: query, placeholder: t("admin.misc.filter")}
      %span.input-group-btn
        %button.btn.btn-primary{type: "submit", :'data-disable-with' => "<i class='icon-white icon-refresh'></i> ".html_safe + t("admin.misc.refresh")}
          %i.icon-white.icon-refresh
          = t("admin.misc.refresh")
        %button#remove_filter.btn.btn-info{title: 'Reset filter'}
          %i.fa.fa-times
    - if export_action
      %span{style: 'float:right'}= link_to wording_for(:link, export_action), export_path(params.except('set').except('page')), class: 'btn btn-info'
