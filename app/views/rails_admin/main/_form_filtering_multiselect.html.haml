:ruby
  related_id = params[:associations] && params[:associations][field.name.to_s]
  config = field.associated_model_config
  
  if @object.new_record? && related_id.present? && related_id != 'new'
    selected = [field.associated_model_config.abstract_model.get(related_id)]
  else
    selected = @object.send(field.name)
  end
  selected_ids = selected.map(&:id)
  
  xhr = field.associated_collection_count > 100
  
  
  if xhr
    collection = selected.map do |o|
      [o.send(config.object_label_method), o.id]
    end
  else
    collection = field.associated_collection(@authorization_adapter).sort_by {|a| selected_ids.index(a[1]) || selected_ids.size }
  end
  edit_url = authorized?(:edit, config.abstract_model) ? rails_admin_edit_path(:model_name => config.abstract_model.to_param, :id => '__ID__') : ''
  
= field_wrapper_for(form, field) do
  %input{:name => field.dom_name, :type => "hidden", :value => ""}
  = form.select field.method_name, collection, { :selected => selected_ids, :object => @object }, field.html_attributes.merge({:'data-edit-url' => edit_url})
  - if authorized? :new, config.abstract_model
    - path_hash = { :model_name => config.abstract_model.to_param }
    - path_hash.merge!({ :associations => { field.inverse_of => (@object.id || 'new') } }) if field.inverse_of
    = link_to t('admin.actions.create').capitalize + ' ' + config.abstract_model.pretty_name.downcase, rails_admin_new_path(path_hash), :class => "createAssociatedRecord"
- head_style 'rails_admin/ra.filtering-multiselect.css'
- head_javascript "rails_admin/ra.filtering-multiselect.js"
- head_javascript do
  $j(document).ready(function($){
  $("##{field.dom_id}").filteringMultiselect({
  - if xhr
    createQuery: function(query) {
    return { query: query }
    },
    source: "#{rails_admin_list_path(config.abstract_model.to_param, :compact => true).html_safe}",
  sortable: #{field.orderable ? 'true' : 'false'},
  regional: {
  chooseAll: "#{t("admin.new.chose_all")}",
  chosen: "#{t("admin.new.chosen", :name => config.abstract_model.model.model_name.human(:count => 2, :default => config.label.pluralize))}",
  clearAll:  "#{t("admin.new.clear_all")}",
  selectChoice: "#{t("admin.new.select_choice")}",
  up: "#{t("admin.new.up")}",
  down: "#{t("admin.new.down")}"
  }
  
  });
  if($("div.createAssociatedRecordDialog").length == 0)Â {
  $(".#{"#{field.dom_id}"} .createAssociatedRecord").remoteForm({ dialogClass: "createAssociatedRecordDialog" });
  } else { // hide link if we already are inside a dialog (endless issues on nested dialogs with JS)
  $(".#{"#{field.dom_id}"} .createAssociatedRecord").hide();
  }
  });